name: Deploy to Itch.io

on:
  workflow_dispatch:

env:
  PROJECT_NAME: "modded-player-demo" # Update if needed
  BUTLER_API_KEY: ${{ secrets.ITCHIO_TOKEN }}
  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}
  FALLBACK_VERSION: "4.3-stable" # Fallback if auto-detect or download fails

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Detect Godot Version
        id: version
        run: |
          VERSION=$(grep -E '^config/version=' project.godot | cut -d '"' -f 2 || true)
          if [ -z "$VERSION" ]; then
            VERSION=$(grep -E '^config/features' project.godot | cut -d '"' -f 2 || true)
          fi

          if [ -z "$VERSION" ]; then
            echo "Could not auto-detect version, using fallback: $FALLBACK_VERSION"
            VERSION="$FALLBACK_VERSION"
          fi

          # Normalize to include '-stable' if missing
          if [[ "$VERSION" != *"stable"* ]]; then
            VERSION="${VERSION}-stable"
          fi

          echo "Detected Godot version: $VERSION"
          echo "GODOT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Cache Export Templates
        uses: actions/cache@v4
        with:
          path: ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}
          key: godot-templates-${{ env.GODOT_VERSION }}

      - name: Download Godot Binary (with validation and fallback)
        run: |
          echo "Downloading Godot v$GODOT_VERSION..."
          PRIMARY_URL="https://downloads.godotengine.org/Godot_v${GODOT_VERSION}_linux.x86_64.zip"
          FALLBACK_URL="https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_linux.x86_64.zip"

          curl --retry 5 --retry-delay 10 -L -o godot.zip "$PRIMARY_URL" || curl -L -o godot.zip "$FALLBACK_URL"

          # Verify file is a ZIP
          if ! file godot.zip | grep -q 'Zip archive data'; then
            echo "Download failed for $GODOT_VERSION, falling back to $FALLBACK_VERSION..."
            curl -L -o godot.zip "https://downloads.godotengine.org/Godot_v${FALLBACK_VERSION}_linux.x86_64.zip"
          fi

          if ! file godot.zip | grep -q 'Zip archive data'; then
            echo "Still invalid. Please check Godot version or URLs."
            exit 1
          fi

          unzip -q godot.zip
          mv Godot_v*_linux.x86_64 godot
          chmod +x godot
          echo "Godot binary ready."

      - name: Download Export Templates (with fallback)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Downloading export templates for $GODOT_VERSION..."
          PRIMARY_URL="https://downloads.godotengine.org/Godot_v${GODOT_VERSION}_export_templates.tpz"
          FALLBACK_URL="https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}_export_templates.tpz"

          curl --retry 5 --retry-delay 10 -L -o export_templates.zip "$PRIMARY_URL" || curl -L -o export_templates.zip "$FALLBACK_URL"

          if ! file export_templates.zip | grep -q 'Zip archive data'; then
            echo "Templates failed for $GODOT_VERSION, trying fallback $FALLBACK_VERSION..."
            curl -L -o export_templates.zip "https://downloads.godotengine.org/Godot_v${FALLBACK_VERSION}_export_templates.tpz"
          fi

          unzip -q export_templates.zip
          mkdir -p ~/.local/share/godot/export_templates/$GODOT_VERSION
          mv ./templates/* ~/.local/share/godot/export_templates/$GODOT_VERSION || true
          echo "Export templates installed."

      - name: Build HTML Export
        run: |
          ./godot --headless --export-release "html" "exports/html/index.html"

      - name: Zip HTML Export
        run: |
          cd exports/html
          zip -qr "../$PROJECT_NAME-html.zip" .
          cd -

      - name: Upload Export Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: exports
          path: exports

  Publish:
    needs: Build
    runs-on: ubuntu-latest

    steps:
      - name: Download Export Artifacts
        uses: actions/download-artifact@v4
        with:
          name: exports
          path: exports

      - name: Download Butler
        run: |
          echo "Downloading Butler..."
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip -q butler.zip
          chmod +x butler
          ./butler -V

      - name: Login To Butler
        run: ./butler login

      - name: Push To Itch.io
        run: |
          echo "Uploading to Itch.io..."
          ./butler push ./exports/$PROJECT_NAME-html.zip $ITCHIO_USERNAME/$PROJECT_NAME:html
